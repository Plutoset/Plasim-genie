#!/bin/bash
#

# standard output and standard error re-directed
# NOTE: run from one level below the root of the genie directory tree
#

# INITALIZE
# ---------

#
echo "*** almond: genie job submission ***"
if [ -z "$1" ]; then
    echo "Usage: '$1' 1st parameter must be the config ID"
    exit 65
  else
    MODELID="$1"
fi
#MODELID="genie_eb_go_gs_ac_bg"
if [ -z "$2" ]; then
    echo "Usage: '$2' 2nd parameter must be whether or not you want an interactive climate (y/n)"
    exit 65
  else
    CLIMATE="$2"
fi
if [ -z "$3" ]; then
    echo "Usage: '$3' 3rd parameter must be the start year"
    exit 65
  else
    STARTYEAR="$3"
fi
if [ -z "$4" ]; then
    echo "Usage: '$4' 4th parameter must be the run length (years)"
    exit 65
  else
    RUNLENGTH="$4"
fi
if [ -z "$5" ]; then
    echo "Usage: '$5' 5th parameter must be the run ID"
    exit 65
  else
    RUNID="$5"
fi
if [ -n "$6" ]; then
  RESTARTID="$6"
fi

# Set model parameters
INPUTPATH=gemconfigs/default/$RUNID
OUTPUTPATH=../../genie_output/$MODELID.$RUNID
RESTARTPATH=../../genie_output/$MODELID"."$RESTARTID
RESTARTNAME="rst.1"
CONFIGPATH=configs
echo $CONFIGPATH
CONFIGNAME=$MODELID"."$RUNID".config"
BINARYPATH=genie/genie-main
GOLDSTEINPATH=../genie-goldstein/src/fortran
#GENIEMAINPATH=..
# clean up all the biogeochem config files
rm -f ../genie-main/data/input/gem*
rm -f ../genie-atchem/data/input/gem*
rm -f ../genie-atchem/data/input/atchem*
rm -f ../genie-biogem/data/input/gem*
rm -f ../genie-biogem/data/input/biogem*
#rm -f ~/genie/genie-sedgem/data/input/gem*
#rm -f ~/genie/genie-sedgem/data/input/sedgem*
echo "CLEANED"

#
echo ">> Checking whether input directory $INPUTPATH exists ..."
if test -d $INPUTPATH
then
  echo "   OK :)"
else
    echo "   Input directory $INPUTPATH cannot be found"
  exit 1
fi
# clean up old output (results) directory if it exists
echo ">> Checking whether results directory $OUTPUTPATH exists ..."
if test -d $OUTPUTPATH
  then
  rm -f -r $OUTPUTPATH
  echo "   Removed old $OUTPUTPATH"
fi

# SET THE COMPILED TRACER DIMENSION
# ---------------------------------

# count the number of ocean tracers and shove the value in a variable
ntracers=$(grep -c -e '^.t' -e '^.T' $INPUTPATH/gem_config_ocn.par)
ntracers_old=$(grep GOLDSTEINNTRACS $CONFIGPATH/$MODELID".config" | grep -o [0-9][0-9])
if [ -z "$ntracers_old" ]; then
  ntracers_old=$(grep GOLDSTEINNTRACS $CONFIGPATH/$MODELID".config" | grep -o [0-9])
fi
# if the number of selected tracers has changed since the last compile:
# (i)  be sure to carry out a 'make cleanall'
# (ii) update the number of tracers set in genie_eb_go_gs_ac_bg.config
# NOTE: take care with the possibility of a 1 vs. 2-digit value being present as the value of GOLDSTEINNTRACS
if [ "$ntracers_old" != "$ntracers" ]; then
  cd  
  cd $BINARYPATH
  make cleanall
#  cd
  mv -f $CONFIGPATH/$MODELID".config" $CONFIGPATH/$MODELID".config.tmp"
  if [ $ntracers_old -lt 10 ]; then
    sed s/'-DGOLDSTEINNTRACS=.'\'/'-DGOLDSTEINNTRACS='$ntracers\'/g $CONFIGPATH/$MODELID".config.tmp" > $CONFIGPATH/$MODELID".config"
  else
    sed s/'-DGOLDSTEINNTRACS=..'\'/'-DGOLDSTEINNTRACS='$ntracers\'/g $CONFIGPATH/$MODELID".config.tmp" > $CONFIGPATH/$MODELID".config"
  fi
  rm -f $CONFIGPATH/$MODELID".config.tmp"
fi

# CREATE AND APPEND TO GENIE RUN CONFIG FILE
# ------------------------------------------

# Copy template config file
cp -f $CONFIGPATH/$MODELID".config" $CONFIGPATH/$CONFIGNAME

# Set run name
echo EXPID=$MODELID.$RUNID >> $CONFIGPATH/$CONFIGNAME

# Configure start year, run length and misc time-related options
# set BIOGEM start year
echo biogem_10=$STARTYEAR >> $CONFIGPATH/$CONFIGNAME
# set BIOGEM run length
echo biogem_11=$RUNLENGTH >> $CONFIGPATH/$CONFIGNAME
# set overall GENIE run length
let stp=$RUNLENGTH*500
echo ma_koverall_total=$stp >> $CONFIGPATH/$CONFIGNAME
echo ma_dt_write=$stp >> $CONFIGPATH/$CONFIGNAME
# set restart frequency
let stp=$RUNLENGTH*100
echo ea_4=$stp >> $CONFIGPATH/$CONFIGNAME
echo go_4=$stp >> $CONFIGPATH/$CONFIGNAME
echo gs_4=$stp >> $CONFIGPATH/$CONFIGNAME
# set 'health check' frequency [NOTE: the '+1' in effect disables this feature]
let stp=$RUNLENGTH*100+1
echo ea_3=$stp >> $CONFIGPATH/$CONFIGNAME
echo go_3=$stp >> $CONFIGPATH/$CONFIGNAME
echo gs_3=$stp >> $CONFIGPATH/$CONFIGNAME
# set 'time series' frequency [NOTE: the '+1' in effect disables this feature]
let stp=$RUNLENGTH*100+1
echo ea_5=$stp >> $CONFIGPATH/$CONFIGNAME
echo go_5=$stp >> $CONFIGPATH/$CONFIGNAME
echo gs_5=$stp >> $CONFIGPATH/$CONFIGNAME
# set 'an average' frequency [NOTE: the '+1' in effect disables this feature]
let stp=$RUNLENGTH*100+1
echo ea_6=$stp >> $CONFIGPATH/$CONFIGNAME
echo go_6=$stp >> $CONFIGPATH/$CONFIGNAME
echo gs_6=$stp >> $CONFIGPATH/$CONFIGNAME

# Set default flags
# Set netCDF restart saving flag
echo ea_31=n >> $CONFIGPATH/$CONFIGNAME
echo go_19=n >> $CONFIGPATH/$CONFIGNAME
echo gs_14=n >> $CONFIGPATH/$CONFIGNAME
# Set ASCII restart output flag
echo ea_32=y >> $CONFIGPATH/$CONFIGNAME
echo go_20=y >> $CONFIGPATH/$CONFIGNAME
echo gs_15=y >> $CONFIGPATH/$CONFIGNAME
# Set ASCII restart number (i.e., output file string)
echo ea_29=rst >> $CONFIGPATH/$CONFIGNAME
echo go_17=rst >> $CONFIGPATH/$CONFIGNAME
echo gs_12=rst >> $CONFIGPATH/$CONFIGNAME

# Set continuing/new run flags
# => set restart input flags
# => disable netCDF restart input flag
# => set restart input number
# => copy restart files to data directory
if [ -n "$6" ]; then
  echo ">> Checking whether restart directory $RESTARTPATH exists ..."
  if test -d $RESTARTPATH
  then
    echo "   OK :)"
  else
      echo "   Restart directory $RESTARTPATH cannot be found"
    exit 1
  fi
  echo ea_7=c >> $CONFIGPATH/$CONFIGNAME
  echo go_7=c >> $CONFIGPATH/$CONFIGNAME
  echo gs_7=c >> $CONFIGPATH/$CONFIGNAME
  echo atchem_7=c >> $CONFIGPATH/$CONFIGNAME
  echo biogem_7=c >> $CONFIGPATH/$CONFIGNAME
#  echo sedgem_7=c >> $CONFIGPATH/$CONFIGNAME
#  echo rokgem_7=c >> $CONFIGPATH/$CONFIGNAME
  echo ea_30=n >> $CONFIGPATH/$CONFIGNAME
  echo go_18=n >> $CONFIGPATH/$CONFIGNAME
  echo gs_13=n >> $CONFIGPATH/$CONFIGNAME
  echo ea_35=$RESTARTNAME >> $CONFIGPATH/$CONFIGNAME
  echo go_23=$RESTARTNAME >> $CONFIGPATH/$CONFIGNAME
  echo gs_18=$RESTARTNAME >> $CONFIGPATH/$CONFIGNAME
  cp -f $RESTARTPATH/embm/$RESTARTNAME genie/genie-embm/data/input/
  cp -f $RESTARTPATH/goldstein/$RESTARTNAME genie/genie-goldstein/data/input/
  cp -f $RESTARTPATH/seaice/$RESTARTNAME genie/genie-goldsteinseaice/data/input/
  cp -f $RESTARTPATH/atchem/atchem genie/genie-atchem/data/input/
  cp -f $RESTARTPATH/biogem/biogem genie/genie-biogem/data/input/
#  cp -f $RESTARTPATH/sedgem/sedgem genie/genie-sedgem/data/input/
#  cp -f $RESTARTPATH/rokgem/rokgem genie/genie-rokgem/data/input/
else
  echo ea_7=n >> $CONFIGPATH/$CONFIGNAME
  echo go_7=n >> $CONFIGPATH/$CONFIGNAME
  echo gs_7=n >> $CONFIGPATH/$CONFIGNAME
  echo atchem_7=n >> $CONFIGPATH/$CONFIGNAME
  echo biogem_7=n >> $CONFIGPATH/$CONFIGNAME
#  echo sedgem_7=n >> $CONFIGPATH/$CONFIGNAME
#  echo rokgem_7=n >> $CONFIGPATH/$CONFIGNAME
fi

# condition ASCII text files
cd $INPUTPATH
# redirect directory file listing
ls > filelist.txt
# count number of files in filelist
nfiles=$(grep -c . filelist.txt)
let nfiles=$nfiles+1
# make a new directory to put the modified files into
mkdir TEMP
#
filenum=1
while [ $filenum -lt $nfiles ]; do
  # get first filename listed in filelist
  filestring=$(grep -m 1 . filelist.txt)
  # process ASCII
  sed 's/\r$/ !/' $filestring >> TEMP/$filestring
#  mv -f $filestring.NEW $filestring
  # display file with carriage return characters
  # cat -v $filestring
  # delete first name of file, and rename (over original file)
  sed 1d filelist.txt >> filelist.txt.NEW
  mv -f filelist.txt.NEW filelist.txt
  let filenum=$filenum+1
done
rm filelist.txt
cd
cd $BINARYPATH

# copy the various configuration files into their correct homes
INPUTPATH=$INPUTPATH/TEMP
cp -f $INPUTPATH/gem_* ../genie-main/data/input/
cp -f $INPUTPATH/gem_* ../genie-atchem/data/input/
cp -f $INPUTPATH/atchem_* ../genie-atchem/data/input/
cp -f $INPUTPATH/gem_* ../genie-biogem/data/input/
cp -f $INPUTPATH/biogem_* ../genie-biogem/data/input/
rm -r -f $INPUTPATH

# Set flag for interactive climate (i.e., response to calculate greenhouse gas concentrations in the atmosphere)
if [ "$CLIMATE" == y ]; then
  echo ea_36=y >> $CONFIGPATH/$CONFIGNAME
elif [ "$CLIMATE" == Y ]; then
  echo ea_36=y >> $CONFIGPATH/$CONFIGNAME
else
  echo ea_36=n >> $CONFIGPATH/$CONFIGNAME
fi

# Set for no REMAKE if submitting to SUNGridEngine
# (assuming that the FORTRAN compiler is not available on or from every individual compute node)
echo REMAKE="FALSE" >> $CONFIGPATH/$CONFIGNAME

# GO!
# ---

# Run model ...
echo ">> Here we go ..."
cd
cd $BINARYPATH
./genie_example.job -f configs/$CONFIGNAME

# Archive and clean up
#cd
echo ">> Archiving ..."
# copy config file to genie_output
mv $CONFIGPATH/$CONFIGNAME $OUTPUTPATH/$CONFIGNAME
# archive results
if test -d ../../genie_archive
then
  echo archive exists
else 
  mkdir ../../genie_archive
fi

tar cvfz ../../genie_archive/$MODELID.$RUNID.tar.gz $OUTPUTPATH #$INPUTPATH
echo ">> All done - now go and play outside"
